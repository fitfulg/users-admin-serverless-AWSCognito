{
  "service": {
    "service": "ercardona-workshop8",
    "serviceObject": {
      "name": "ercardona-workshop8"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs12.x",
      "lambdaHashingVersion": "20201221",
      "stage": "dev",
      "region": "us-east-1",
      "environment": {
        "USER_POOL_ID": {
          "Ref": "CognitoUserPool"
        },
        "APP_CLIENT_ID": {
          "Ref": "CognitoUserPoolClient"
        },
        "REGION": "us-east-1"
      },
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "AuthLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ercardona-workshop8-dev-auth"
            }
          },
          "GetInfoLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ercardona-workshop8-dev-getInfo"
            }
          },
          "SignUpLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ercardona-workshop8-dev-signUp"
            }
          },
          "VerifyCodeLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ercardona-workshop8-dev-verifyCode"
            }
          },
          "LogInLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ercardona-workshop8-dev-logIn"
            }
          },
          "RenewTokenLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ercardona-workshop8-dev-renewToken"
            }
          },
          "ChangePasswordLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ercardona-workshop8-dev-changePassword"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "ercardona-workshop8",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ercardona-workshop8-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ercardona-workshop8-dev*:*:*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "ercardona-workshop8",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "AuthLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/ercardona-workshop8/dev/1642414366661-2022-01-17T10:12:46.661Z/ercardona-workshop8.zip"
              },
              "Handler": "src/handlers/authorizer.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "ercardona-workshop8-dev-auth",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USER_POOL_ID": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USER_POOL_ID\"]"
                  },
                  "APP_CLIENT_ID": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"APP_CLIENT_ID\"]"
                  },
                  "REGION": "us-east-1"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AuthLogGroup"
            ]
          },
          "GetInfoLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/ercardona-workshop8/dev/1642414366661-2022-01-17T10:12:46.661Z/ercardona-workshop8.zip"
              },
              "Handler": "src/handlers/getInfo/index.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "ercardona-workshop8-dev-getInfo",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USER_POOL_ID": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USER_POOL_ID\"]"
                  },
                  "APP_CLIENT_ID": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"APP_CLIENT_ID\"]"
                  },
                  "REGION": "us-east-1"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetInfoLogGroup"
            ]
          },
          "SignUpLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/ercardona-workshop8/dev/1642414366661-2022-01-17T10:12:46.661Z/ercardona-workshop8.zip"
              },
              "Handler": "src/handlers/signUp/index.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "ercardona-workshop8-dev-signUp",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USER_POOL_ID": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USER_POOL_ID\"]"
                  },
                  "APP_CLIENT_ID": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"APP_CLIENT_ID\"]"
                  },
                  "REGION": "us-east-1"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SignUpLogGroup"
            ]
          },
          "VerifyCodeLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/ercardona-workshop8/dev/1642414366661-2022-01-17T10:12:46.661Z/ercardona-workshop8.zip"
              },
              "Handler": "src/handlers/verifyCode/index.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "ercardona-workshop8-dev-verifyCode",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USER_POOL_ID": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USER_POOL_ID\"]"
                  },
                  "APP_CLIENT_ID": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"APP_CLIENT_ID\"]"
                  },
                  "REGION": "us-east-1"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "VerifyCodeLogGroup"
            ]
          },
          "LogInLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/ercardona-workshop8/dev/1642414366661-2022-01-17T10:12:46.661Z/ercardona-workshop8.zip"
              },
              "Handler": "src/handlers/logIn/index.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "ercardona-workshop8-dev-logIn",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USER_POOL_ID": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USER_POOL_ID\"]"
                  },
                  "APP_CLIENT_ID": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"APP_CLIENT_ID\"]"
                  },
                  "REGION": "us-east-1"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "LogInLogGroup"
            ]
          },
          "RenewTokenLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/ercardona-workshop8/dev/1642414366661-2022-01-17T10:12:46.661Z/ercardona-workshop8.zip"
              },
              "Handler": "src/handlers/renewToken/index.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "ercardona-workshop8-dev-renewToken",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USER_POOL_ID": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USER_POOL_ID\"]"
                  },
                  "APP_CLIENT_ID": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"APP_CLIENT_ID\"]"
                  },
                  "REGION": "us-east-1"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "RenewTokenLogGroup"
            ]
          },
          "ChangePasswordLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/ercardona-workshop8/dev/1642414366661-2022-01-17T10:12:46.661Z/ercardona-workshop8.zip"
              },
              "Handler": "src/handlers/changePassword/index.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "ercardona-workshop8-dev-changePassword",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USER_POOL_ID": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USER_POOL_ID\"]"
                  },
                  "APP_CLIENT_ID": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"APP_CLIENT_ID\"]"
                  },
                  "REGION": "us-east-1"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ChangePasswordLogGroup"
            ]
          },
          "AuthLambdaVersionEHJM87fzlUIKAdjC8j4zhrKPfc2rnTTbfGsvS7XNuno": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AuthLambdaFunction"
              },
              "CodeSha256": "/3rgESSdIi+zjyRAIf3vAlJMGjq1XoDqUbjOHrz0sZ0="
            }
          },
          "GetInfoLambdaVersionPXS25yFUCIghAfzDsIfvdBbzueWFcmkJgp2TXPQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetInfoLambdaFunction"
              },
              "CodeSha256": "/3rgESSdIi+zjyRAIf3vAlJMGjq1XoDqUbjOHrz0sZ0="
            }
          },
          "SignUpLambdaVersionuBJbzbY7LlxR5jf4W78dLKTXqj1ud0g4iwkvfFkY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SignUpLambdaFunction"
              },
              "CodeSha256": "/3rgESSdIi+zjyRAIf3vAlJMGjq1XoDqUbjOHrz0sZ0="
            }
          },
          "VerifyCodeLambdaVersionoKKccXKCcGtBypLdlC7IFJgRivmNdIaWHMLprL3IWE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "VerifyCodeLambdaFunction"
              },
              "CodeSha256": "/3rgESSdIi+zjyRAIf3vAlJMGjq1XoDqUbjOHrz0sZ0="
            }
          },
          "LogInLambdaVersionIzc3KmwUT8N1u8jv7ziWz6TFMCpwLcT0Kht3ykZO5sE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "LogInLambdaFunction"
              },
              "CodeSha256": "/3rgESSdIi+zjyRAIf3vAlJMGjq1XoDqUbjOHrz0sZ0="
            }
          },
          "RenewTokenLambdaVersionpZSBKUbMz1RTpXEKT4JY8efWpqNSFEzx9PtyJ8gA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RenewTokenLambdaFunction"
              },
              "CodeSha256": "/3rgESSdIi+zjyRAIf3vAlJMGjq1XoDqUbjOHrz0sZ0="
            }
          },
          "ChangePasswordLambdaVersionbwFE99XMWo1j4qzDwRaB9FflVfgbO3yGFETmFidU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ChangePasswordLambdaFunction"
              },
              "CodeSha256": "/3rgESSdIi+zjyRAIf3vAlJMGjq1XoDqUbjOHrz0sZ0="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-ercardona-workshop8",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceApi": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "api",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiInfo": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApi"
              },
              "PathPart": "info",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiUser": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApi"
              },
              "PathPart": "user",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiUserSignup": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApiUser"
              },
              "PathPart": "signup",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiUserVerify": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApiUser"
              },
              "PathPart": "verify",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiUserLogin": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApiUser"
              },
              "PathPart": "login",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiUserRefresh": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApiUser"
              },
              "PathPart": "refresh",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiUserPassword": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApiUser"
              },
              "PathPart": "password",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodApiInfoGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiInfo"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetInfoLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "AuthApiGatewayAuthorizer"
          },
          "ApiGatewayMethodApiUserSignupPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiUserSignup"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SignUpLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayErcardonaworkshop8RequestValidator"
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "ApiGatewayMethodApiUserSignupPostApplicationJsonModel"
                }
              }
            },
            "DependsOn": [
              "SignUpLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodApiUserVerifyPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiUserVerify"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "VerifyCodeLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayErcardonaworkshop8RequestValidator"
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "ApiGatewayMethodApiUserVerifyPostApplicationJsonModel"
                }
              }
            },
            "DependsOn": [
              "VerifyCodeLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodApiUserLoginPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiUserLogin"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "LogInLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayErcardonaworkshop8RequestValidator"
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "ApiGatewayMethodApiUserLoginPostApplicationJsonModel"
                }
              }
            },
            "DependsOn": [
              "LogInLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodApiUserRefreshPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiUserRefresh"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "RenewTokenLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayErcardonaworkshop8RequestValidator"
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "ApiGatewayMethodApiUserRefreshPostApplicationJsonModel"
                }
              }
            },
            "DependsOn": [
              "RenewTokenLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodApiUserPasswordPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiUserPassword"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ChangePasswordLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayErcardonaworkshop8RequestValidator"
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "ApiGatewayMethodApiUserPasswordPostApplicationJsonModel"
                }
              }
            },
            "DependsOn": [
              "ChangePasswordLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayErcardonaworkshop8RequestValidator": {
            "Type": "AWS::ApiGateway::RequestValidator",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ValidateRequestBody": true,
              "ValidateRequestParameters": true,
              "Name": "ercardona-workshop8-dev | Validate request body and querystring parameters"
            }
          },
          "ApiGatewayMethodApiUserSignupPostApplicationJsonModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ContentType": "application/json",
              "Schema": {
                "type": "object",
                "title": "SignUp Model",
                "description": "This is an example of body we need in order to register a user",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "email address of the new user",
                    "format": "email"
                  },
                  "name": {
                    "type": "string",
                    "description": "user name",
                    "minLength": 2,
                    "maxLength": 10
                  },
                  "password": {
                    "type": "string",
                    "description": "password of the new user (Min 8 characters, 1 UpperCase, 1 Number and 1 Lowercase",
                    "pattern": "^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$"
                  }
                },
                "required": [
                  "email",
                  "name",
                  "password"
                ]
              }
            }
          },
          "ApiGatewayMethodApiUserVerifyPostApplicationJsonModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ContentType": "application/json",
              "Schema": {
                "type": "object",
                "title": "Verify Code Model",
                "description": "This is an example of body we need in order to verify a new user",
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "registration code received by email"
                  },
                  "email": {
                    "type": "string",
                    "description": "email address of the new user",
                    "format": "email"
                  }
                },
                "required": [
                  "email",
                  "code"
                ]
              }
            }
          },
          "ApiGatewayMethodApiUserLoginPostApplicationJsonModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ContentType": "application/json"
            }
          },
          "ApiGatewayMethodApiUserRefreshPostApplicationJsonModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ContentType": "application/json",
              "Schema": {
                "type": "object",
                "title": "Renew Input Model",
                "description": "This is an example of body we need for renew a user's token",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "email address of the user",
                    "format": "email"
                  },
                  "refreshToken": {
                    "type": "string",
                    "description": "the refresh token the user has"
                  }
                },
                "required": [
                  "email",
                  "refreshToken"
                ]
              }
            }
          },
          "ApiGatewayMethodApiUserPasswordPostApplicationJsonModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ContentType": "application/json",
              "Schema": {
                "type": "object",
                "title": "Change Password Model",
                "description": "This is an example of body we need in order to change user password",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "email address of the user",
                    "format": "email"
                  },
                  "password": {
                    "type": "string",
                    "description": "password of the user (Min 8 characters, 1 UpperCase, 1 Number and 1 Lowercase",
                    "pattern": "^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$"
                  },
                  "newPassword": {
                    "type": "string",
                    "description": "new password of the user (Min 8 characters, 1 UpperCase, 1 Number and 1 Lowercase",
                    "pattern": "^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$"
                  }
                },
                "required": [
                  "email",
                  "password",
                  "newPassword"
                ]
              }
            }
          },
          "AuthApiGatewayAuthorizer": {
            "Type": "AWS::ApiGateway::Authorizer",
            "Properties": {
              "IdentitySource": "method.request.header.Authorization",
              "Name": "auth",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "AuthorizerUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "AuthLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              },
              "Type": "TOKEN"
            }
          },
          "ApiGatewayDeployment1642414363690": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodApiInfoGet",
              "ApiGatewayMethodApiUserSignupPost",
              "ApiGatewayMethodApiUserVerifyPost",
              "ApiGatewayMethodApiUserLoginPost",
              "ApiGatewayMethodApiUserRefreshPost",
              "ApiGatewayMethodApiUserPasswordPost"
            ]
          },
          "GetInfoLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetInfoLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AuthLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AuthLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SignUpLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SignUpLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "VerifyCodeLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "VerifyCodeLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "LogInLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "LogInLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "RenewTokenLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RenewTokenLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ChangePasswordLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ChangePasswordLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CognitoUserPool": {
            "Type": "AWS::Cognito::UserPool",
            "Properties": {
              "UserPoolName": "ercardona-workshop8-dev-user-pool",
              "UsernameAttributes": [
                "email"
              ],
              "AutoVerifiedAttributes": [
                "email"
              ]
            }
          },
          "CognitoUserPoolClient": {
            "Type": "AWS::Cognito::UserPoolClient",
            "Properties": {
              "ClientName": "ercardona-workshop8-dev-user-pool-client",
              "UserPoolId": {
                "Ref": "CognitoUserPool"
              },
              "ExplicitAuthFlows": [
                "ADMIN_NO_SRP_AUTH"
              ],
              "GenerateSecret": false
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-ercardona-workshop8-dev-ServerlessDeploymentBucketName"
            }
          },
          "AuthLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AuthLambdaVersionEHJM87fzlUIKAdjC8j4zhrKPfc2rnTTbfGsvS7XNuno"
            },
            "Export": {
              "Name": "sls-ercardona-workshop8-dev-AuthLambdaFunctionQualifiedArn"
            }
          },
          "GetInfoLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetInfoLambdaVersionPXS25yFUCIghAfzDsIfvdBbzueWFcmkJgp2TXPQ"
            },
            "Export": {
              "Name": "sls-ercardona-workshop8-dev-GetInfoLambdaFunctionQualifiedArn"
            }
          },
          "SignUpLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SignUpLambdaVersionuBJbzbY7LlxR5jf4W78dLKTXqj1ud0g4iwkvfFkY"
            },
            "Export": {
              "Name": "sls-ercardona-workshop8-dev-SignUpLambdaFunctionQualifiedArn"
            }
          },
          "VerifyCodeLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "VerifyCodeLambdaVersionoKKccXKCcGtBypLdlC7IFJgRivmNdIaWHMLprL3IWE"
            },
            "Export": {
              "Name": "sls-ercardona-workshop8-dev-VerifyCodeLambdaFunctionQualifiedArn"
            }
          },
          "LogInLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "LogInLambdaVersionIzc3KmwUT8N1u8jv7ziWz6TFMCpwLcT0Kht3ykZO5sE"
            },
            "Export": {
              "Name": "sls-ercardona-workshop8-dev-LogInLambdaFunctionQualifiedArn"
            }
          },
          "RenewTokenLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RenewTokenLambdaVersionpZSBKUbMz1RTpXEKT4JY8efWpqNSFEzx9PtyJ8gA"
            },
            "Export": {
              "Name": "sls-ercardona-workshop8-dev-RenewTokenLambdaFunctionQualifiedArn"
            }
          },
          "ChangePasswordLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ChangePasswordLambdaVersionbwFE99XMWo1j4qzDwRaB9FflVfgbO3yGFETmFidU"
            },
            "Export": {
              "Name": "sls-ercardona-workshop8-dev-ChangePasswordLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-ercardona-workshop8-dev-ServiceEndpoint"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "userPoolName": "ercardona-workshop8-dev-user-pool",
      "userPoolClient": "ercardona-workshop8-dev-user-pool-client"
    },
    "pluginsData": {},
    "functions": {
      "auth": {
        "handler": "src/handlers/authorizer.handler",
        "events": [],
        "name": "ercardona-workshop8-dev-auth",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "AuthLambdaVersionEHJM87fzlUIKAdjC8j4zhrKPfc2rnTTbfGsvS7XNuno"
      },
      "getInfo": {
        "handler": "src/handlers/getInfo/index.handler",
        "events": [
          {
            "http": {
              "path": "api/info",
              "method": "get",
              "authorizer": {
                "name": "auth",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "identitySource": "method.request.header.Authorization"
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "ercardona-workshop8-dev-getInfo",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetInfoLambdaVersionPXS25yFUCIghAfzDsIfvdBbzueWFcmkJgp2TXPQ"
      },
      "signUp": {
        "handler": "src/handlers/signUp/index.handler",
        "events": [
          {
            "http": {
              "path": "api/user/signup",
              "method": "post",
              "request": {
                "schemas": {
                  "application/json": {
                    "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodApiUserSignupPostApplicationJsonModel\"][\"Properties\"][\"Schema\"]"
                  }
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "ercardona-workshop8-dev-signUp",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "SignUpLambdaVersionuBJbzbY7LlxR5jf4W78dLKTXqj1ud0g4iwkvfFkY"
      },
      "verifyCode": {
        "handler": "src/handlers/verifyCode/index.handler",
        "events": [
          {
            "http": {
              "path": "api/user/verify",
              "method": "post",
              "request": {
                "schemas": {
                  "application/json": {
                    "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodApiUserVerifyPostApplicationJsonModel\"][\"Properties\"][\"Schema\"]"
                  }
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "ercardona-workshop8-dev-verifyCode",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "VerifyCodeLambdaVersionoKKccXKCcGtBypLdlC7IFJgRivmNdIaWHMLprL3IWE"
      },
      "logIn": {
        "handler": "src/handlers/logIn/index.handler",
        "events": [
          {
            "http": {
              "path": "api/user/login",
              "method": "post",
              "request": {
                "schemas": {}
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "ercardona-workshop8-dev-logIn",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "LogInLambdaVersionIzc3KmwUT8N1u8jv7ziWz6TFMCpwLcT0Kht3ykZO5sE"
      },
      "renewToken": {
        "handler": "src/handlers/renewToken/index.handler",
        "events": [
          {
            "http": {
              "path": "api/user/refresh",
              "method": "post",
              "request": {
                "schemas": {
                  "application/json": {
                    "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodApiUserRefreshPostApplicationJsonModel\"][\"Properties\"][\"Schema\"]"
                  }
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "ercardona-workshop8-dev-renewToken",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "RenewTokenLambdaVersionpZSBKUbMz1RTpXEKT4JY8efWpqNSFEzx9PtyJ8gA"
      },
      "changePassword": {
        "handler": "src/handlers/changePassword/index.handler",
        "events": [
          {
            "http": {
              "path": "api/user/password",
              "method": "post",
              "request": {
                "schemas": {
                  "application/json": {
                    "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodApiUserPasswordPostApplicationJsonModel\"][\"Properties\"][\"Schema\"]"
                  }
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "ercardona-workshop8-dev-changePassword",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "ChangePasswordLambdaVersionbwFE99XMWo1j4qzDwRaB9FflVfgbO3yGFETmFidU"
      }
    },
    "resources": {
      "Resources": {
        "CognitoUserPool": {
          "Type": "AWS::Cognito::UserPool",
          "Properties": {
            "UserPoolName": "ercardona-workshop8-dev-user-pool",
            "UsernameAttributes": [
              "email"
            ],
            "AutoVerifiedAttributes": [
              "email"
            ]
          }
        },
        "CognitoUserPoolClient": {
          "Type": "AWS::Cognito::UserPoolClient",
          "Properties": {
            "ClientName": "ercardona-workshop8-dev-user-pool-client",
            "UserPoolId": {
              "Ref": "CognitoUserPool"
            },
            "ExplicitAuthFlows": [
              "ADMIN_NO_SRP_AUTH"
            ],
            "GenerateSecret": false
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": {
        "$ref": "$[\"service\"][\"serviceObject\"]"
      },
      "frameworkVersion": "2",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "/Users/eric/practicing/ercardona-workshop8/.serverless/ercardona-workshop8.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/ercardona-workshop8/dev/1642414366661-2022-01-17T10:12:46.661Z",
    "artifact": "ercardona-workshop8.zip"
  }
}